# BNF de gramatica LL1 para parser de un sub-set de c
# terminal "" = vacio 
<start> ::= <declare> | <comment> <start>
<callF> ::= "(" <params> ")"
<comment> ::= "comentarioL" | "comentarioB"
<declare> ::= <tipo> <var> <branch> | <var> "(" <params> ")" <eol>
<branch> ::= "(" <params> ")" "{" <stmt> "}" | <eq> <var_fin> <eol>
<params> ::= <tipo> <var> <cm> <var_params> | ""
<var_params> ::= <params>
<eq> ::= "=" | "," 
<cm> ::= "," | ""
<var_fin> ::= <branch> | "" | "text" | "digito"
<tipo> ::= "int" | "char" | "float" | "void" | "long" | "double"
<var> ::= "id"
<eol> ::= ";"
<stmt> ::=  "" 
            | <comment> <stmt> 
            | <expStmt> <eol> <stmt> 
            | <var> <expStmt> <eol> <stmt> 
            | <ifStmt> <stmt> 
            | <iterStmt> <stmt> 
            | <returnStmt>
<returnStmt> ::= "return" <var_stmt> <eol>
<expStmt> ::= <tipo> <var> <eq> <var_stmt> | <op> <expr> | <callF>
<var_stmt> ::= <var> | <expStmt> | "" | "text" | "digito"
<ifStmt> ::= "if" "(" <aSimpleExp> ")"  "{" <stmt> "}" <els>
<els> ::= "" | "else" "{" <stmt> "}"
<iterStmt> ::=  "while" "(" <aSimpleExp> ")" "{" <stmt> "}"
                | "do" "{" <stmt> "}" "while" "(" <aSimpleExp> ")" <eol>
                | "for" "(" <aSimpleExp> ";" <aSimpleExp> ";" <aSimpleExp> ")" "{" <stmt> "}"
<op> ::= "<" | "<=" | ">" | ">=" | "=" | "==" | "||" | "&&" | "+" | "-" | "*" | "/"
<expr> ::= <var> <expr_tail> | "digito" | "text" | "TRUE" | "FALSE"
<expr_tail> ::= <op> <expr> | ""
<aSimpleExp> ::= "!" "(" <expr> ")" <expr_tail> | <aSimpleExp> | <expr>
<simpleExp> ::= <tipo> <var> <op> <expr>