Start -> declare
Start -> comment Start
comment -> //
declare -> tipo var branch
branch -> ( params ) { stmt } 
branch -> eq var_fin eol
params -> tipo var cm var_params
params -> ''
var_params -> params
eq -> =
eq -> ,
cm -> ,
cm -> ''
var_fin -> branch 
var_fin -> ''
var_fin -> text
var_fin -> digito
tipo -> int 
tipo -> char
tipo -> float
tipo -> void
tipo -> long
tipo -> double
var -> id
eol -> ;
stmt -> expStmt eol
stmt -> ifStmt
stmt -> iterStmt
stmt -> returnStmt
returnStmt -> return var_stmt eol
expStmt -> tipo var eq var_stmt
expStmt -> var op expr
var_stmt -> expStmt
var_stmt -> ''
var_stmt -> text
var_stmt -> digito
ifStmt -> if ( ASimpleExp ) { stmt } els
els -> ''
els -> else { stmt }
iterStmt -> while ( ASimpleExp ) { stmt }
iterStmt -> do { stmt } while ( ASimpleExp )
iterStmt -> for ( expStmt ; expStmt ; expStmt ) { stmt }
op -> <
op -> <=
op -> >
op -> >=
op -> =
op -> ==
op -> ||
op -> &&
expr -> var expr_tail
expr -> digito
expr -> text
expr -> TRUE
expr -> FALSE
expr_tail -> + expr
expr_tail -> - expr
expr_tail -> * expr
expr_tail -> / expr
expr_tail -> ''
ASimpleExp -> ! ( simpleExp )
ASimpleExp -> simpleExp
ASimpleExp -> expr
simpleExp -> var op expr