Start -> declare
Start -> comment Start
callF -> ( params )
comment -> comentarioL
comment -> comentarioB
declare -> tipo var branch
declare -> var ( params ) eol
branch -> ( params ) { stmt } 
branch -> eq var_fin eol
params -> tipo var cm var_params
params -> ''
var_params -> params
eq -> =
eq -> ,
cm -> ,
cm -> ''
var_fin -> branch 
var_fin -> ''
var_fin -> text
var_fin -> digito
tipo -> int 
tipo -> char
tipo -> float
tipo -> void
tipo -> long
tipo -> double
var -> id
eol -> ;
stmt -> ''
stmt -> comment stmt
stmt -> expStmt eol stmt
stmt -> var expStmt eol stmt
stmt -> ifStmt stmt
stmt -> iterStmt stmt
stmt -> returnStmt
returnStmt -> return var_stmt eol
expStmt -> tipo var eq var_stmt
expStmt -> op expr
expStmt -> callF
var_stmt -> var
var_stmt -> expStmt
var_stmt -> ''
var_stmt -> text
var_stmt -> digito
ifStmt -> if ( ASimpleExp ) { stmt } els
els -> ''
els -> else { stmt }
iterStmt -> while ( ASimpleExp ) { stmt }
iterStmt -> do { stmt } while ( ASimpleExp ) eol
iterStmt -> for ( expStmt ; expStmt ; expStmt ) { stmt }
op -> <
op -> <=
op -> >
op -> >=
op -> =
op -> ==
op -> ||
op -> &&
op -> +
op -> -
op -> *
op -> /
expr -> var expr_tail
expr -> digito
expr -> text
expr -> TRUE
expr -> FALSE
expr_tail -> op expr
expr_tail -> ''
ASimpleExp -> ! ( expr ) expr_tail
ASimpleExp -> simpleExp
ASimpleExp -> expr
simpleExp -> tipo var op expr